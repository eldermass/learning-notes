import{_ as n,Y as t,Z as o,a1 as a,a2 as s,a3 as i,$ as r,a0 as p,E as l}from"./framework-6d304b95.js";const c={},d=a("h1",{id:"oauth2-协议",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#oauth2-协议","aria-hidden":"true"},"#"),s(" Oauth2 协议")],-1),u=a("h2",{id:"介绍",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#介绍","aria-hidden":"true"},"#"),s(" 介绍")],-1),v={href:"http://www.ruanyifeng.com/blog/2019/04/oauth_design.html",target:"_blank",rel:"noopener noreferrer"},h=a("p",null,[a("strong",null,"OAuth 就是一种授权机制。数据的所有者告诉系统，同意授权第三方应用进入系统，获取这些数据。系统从而产生一个短期的进入令牌（token），用来代替密码，供第三方应用使用。")],-1),b=a("p",null,"这种令牌有一下三个特色",-1),k=p(`<ul><li>令牌是短期的，到期会自动失效，用户自己无法修改。</li><li>令牌可以被数据所有者撤销，会立即失效。屋主可以随时取消快递员的令牌。</li><li>令牌有权限范围（scope），比如只能进小区的二号门。对于网络服务来说，只读令牌就比读写令牌更安全。</li></ul><h2 id="颁发细节" tabindex="-1"><a class="header-anchor" href="#颁发细节" aria-hidden="true">#</a> 颁发细节</h2><p>一共分成四种授权类型（authorization grant），即四种颁发令牌的方式，适用于不同的互联网场景。</p><p>注意，不管哪一种授权方式，第三方应用申请令牌之前，都必须先到系统备案，说明自己的身份，然后会拿到两个身份识别码：客户端 ID（client ID）和客户端密钥（client secret）。这是为了防止令牌被滥用，没有备案过的第三方应用，是不会拿到令牌的。</p><h3 id="授权码-authorization-code" tabindex="-1"><a class="header-anchor" href="#授权码-authorization-code" aria-hidden="true">#</a> 授权码（authorization-code）</h3><p><strong>授权码（authorization code）方式，指的是第三方应用先申请一个授权码，然后再用该码获取令牌。</strong></p><p><img src="https://df5apg8r0m634.cloudfront.net/images/c90355ce2fc1320f18d45db095dc95e6.png" alt="授权码获取令牌"></p><p>第一步，A 网站提供一个链接，用户点击后就会跳转到 B 网站，授权用户数据给 A 网站使用。下面就是 A 网站跳转 B 网站的一个示意链接。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>https://b.com/oauth/authorize?
    <span class="token assign-left variable">response_type</span><span class="token operator">=</span>code<span class="token operator">&amp;</span>
    <span class="token assign-left variable">client_id</span><span class="token operator">=</span>CLIENT_ID<span class="token operator">&amp;</span>
    <span class="token assign-left variable">redirect_uri</span><span class="token operator">=</span>CALLBACK_URL<span class="token operator">&amp;</span>
    <span class="token assign-left variable">scope</span><span class="token operator">=</span>read
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面 URL 中，<code>response_type</code> 参数表示要求返回授权码（code），client_id 参数让 B 知道是谁在请求，<code>redirect_uri</code> 参数是 B 接受或拒绝请求后的跳转网址，<code>scope</code> 参数表示要求的授权范围（这里是只读）。</p><p>第二步，用户跳转后，B 网站会要求用户登录，然后询问是否同意给予 A 网站授权。用户表示同意，这时 B 网站就会跳回 <code>redirect_uri</code> 参数指定的网址。跳转时，会传回一个授权码，就像下面这样。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>https://a.com/callback?code<span class="token operator">=</span>AUTHORIZATION_CODE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第三步，A 网站拿到授权码以后，就可以在后端，向 B 网站请求令牌。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>https://b.com/oauth/token?
 <span class="token assign-left variable">client_id</span><span class="token operator">=</span>CLIENT_ID<span class="token operator">&amp;</span>
 <span class="token assign-left variable">client_secret</span><span class="token operator">=</span>CLIENT_SECRET<span class="token operator">&amp;</span>
 <span class="token assign-left variable">grant_type</span><span class="token operator">=</span>authorization_code<span class="token operator">&amp;</span>
 <span class="token assign-left variable">code</span><span class="token operator">=</span>AUTHORIZATION_CODE<span class="token operator">&amp;</span>
 <span class="token assign-left variable">redirect_uri</span><span class="token operator">=</span>CALLBACK_URL
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面 URL <code>中，client_id</code> 参数和 <code>client_secret</code> 参数用来让 B 确认 A 的身份（<code>client_secret</code> 参数是保密的，因此只能在后端发请求），<code>grant_type</code> 参数的值是 <code>AUTHORIZATION_CODE</code>，表示采用的授权方式是授权码，<code>code</code> 参数是上一步拿到的授权码，<code>redirect_uri</code> 参数是令牌颁发后的回调网址。</p><p>第四步，B 网站收到请求以后，就会颁发令牌。具体做法是向 <code>redirect_uri</code> 指定的网址，发送一段 JSON 数据。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;access_token&quot;</span><span class="token operator">:</span><span class="token string">&quot;ACCESS_TOKEN&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;token_type&quot;</span><span class="token operator">:</span><span class="token string">&quot;bearer&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;expires_in&quot;</span><span class="token operator">:</span><span class="token number">2592000</span><span class="token punctuation">,</span>
  <span class="token property">&quot;refresh_token&quot;</span><span class="token operator">:</span><span class="token string">&quot;REFRESH_TOKEN&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;scope&quot;</span><span class="token operator">:</span><span class="token string">&quot;read&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;uid&quot;</span><span class="token operator">:</span><span class="token number">100101</span><span class="token punctuation">,</span>
  <span class="token property">&quot;info&quot;</span><span class="token operator">:</span><span class="token punctuation">{</span>...<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面 JSON <code>数据中，access_token</code> 字段就是令牌，A 网站在后端拿到了。</p><h3 id="隐藏式-implicit" tabindex="-1"><a class="header-anchor" href="#隐藏式-implicit" aria-hidden="true">#</a> 隐藏式（implicit）</h3><p>第一步，A 网站提供一个链接，要求用户跳转到 B 网站，授权用户数据给 A 网站使用。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>https://b.com/oauth/authorize?
  <span class="token assign-left variable">response_type</span><span class="token operator">=</span>token<span class="token operator">&amp;</span>
  <span class="token assign-left variable">client_id</span><span class="token operator">=</span>CLIENT_ID<span class="token operator">&amp;</span>
  <span class="token assign-left variable">redirect_uri</span><span class="token operator">=</span>CALLBACK_URL<span class="token operator">&amp;</span>
  <span class="token assign-left variable">scope</span><span class="token operator">=</span>read
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二步，用户跳转到 B 网站，登录后同意给予 A 网站授权。这时，B 网站就会跳回 <code>redirect_uri</code> 参数指定的跳转网址，并且把令牌作为 URL 参数，传给 A 网站。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>https://a.com/callback<span class="token comment">#token=ACCESS_TOKEN</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="密码式-password" tabindex="-1"><a class="header-anchor" href="#密码式-password" aria-hidden="true">#</a> 密码式（password）</h3><p>第一步，A 网站要求用户提供 B 网站的用户名和密码。拿到以后，A 就直接向 B 请求令牌。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>https://oauth.b.com/token?
    <span class="token assign-left variable">grant_type</span><span class="token operator">=</span>password<span class="token operator">&amp;</span>
    <span class="token assign-left variable">username</span><span class="token operator">=</span>USERNAME<span class="token operator">&amp;</span>
    <span class="token assign-left variable">password</span><span class="token operator">=</span>PASSWORD<span class="token operator">&amp;</span>
    <span class="token assign-left variable">client_id</span><span class="token operator">=</span>CLIENT_ID
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二步，B 网站验证身份通过后，直接给出令牌。注意，这时不需要跳转，而是把令牌放在 JSON 数据里面，作为 HTTP 回应，A 因此拿到令牌。</p><h3 id="客户端凭证-client-credentials" tabindex="-1"><a class="header-anchor" href="#客户端凭证-client-credentials" aria-hidden="true">#</a> 客户端凭证（client credentials）</h3><p><strong>最后一种方式是凭证式（client credentials），适用于没有前端的命令行应用，即在命令行下请求令牌。</strong></p><p>第一步，A 应用在命令行向 B 发出请求。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>https://oauth.b.com/token?
  <span class="token assign-left variable">grant_type</span><span class="token operator">=</span>client_credentials<span class="token operator">&amp;</span>
  <span class="token assign-left variable">client_id</span><span class="token operator">=</span>CLIENT_ID<span class="token operator">&amp;</span>
  <span class="token assign-left variable">client_secret</span><span class="token operator">=</span>CLIENT_SECRET
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二步，B 网站验证通过以后，直接返回令牌。</p><h2 id="令牌的使用" tabindex="-1"><a class="header-anchor" href="#令牌的使用" aria-hidden="true">#</a> 令牌的使用</h2><p>A 网站拿到令牌以后，就可以向 B 网站的 API 请求数据了。</p><p>此时，每个发到 API 的请求，都必须带有令牌。具体做法是在请求的头信息，加上一个 Authorization 字段，令牌就放在这个字段里面。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">curl</span> <span class="token parameter variable">-H</span> <span class="token string">&quot;Authorization: Bearer ACCESS_TOKEN&quot;</span> <span class="token punctuation">\\</span>
<span class="token string">&quot;https://api.b.com&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="更新令牌" tabindex="-1"><a class="header-anchor" href="#更新令牌" aria-hidden="true">#</a> 更新令牌</h2><p>B 网站颁发令牌的时候，一次性颁发两个令牌，一个用于获取数据，另一个用于获取新的令牌（refresh token 字段）。令牌到期前，用户使用 refresh token 发一个请求，去更新令牌。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>https://b.com/oauth/token?
  <span class="token assign-left variable">grant_type</span><span class="token operator">=</span>refresh_token<span class="token operator">&amp;</span>
  <span class="token assign-left variable">client_id</span><span class="token operator">=</span>CLIENT_ID<span class="token operator">&amp;</span>
  <span class="token assign-left variable">client_secret</span><span class="token operator">=</span>CLIENT_SECRET<span class="token operator">&amp;</span>
  <span class="token assign-left variable">refresh_token</span><span class="token operator">=</span>REFRESH_TOKEN
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,39);function m(g,_){const e=l("ExternalLinkIcon");return t(),o("div",null,[d,u,a("p",null,[a("a",v,[s("阮一峰入门"),i(e)])]),h,b,r(" prettier-ignore "),k])}const A=n(c,[["render",m],["__file","OAUTH2.html.vue"]]);export{A as default};
