import{_ as e,Y as n,Z as a,a0 as s}from"./framework-6d304b95.js";const o={},c=s(`<h1 id="restful-api-设计规范" tabindex="-1"><a class="header-anchor" href="#restful-api-设计规范" aria-hidden="true">#</a> RESTful API 设计规范</h1><p>由于前后端数据通信的场景越来越常见，通信间的规范就显得重要起来。一般来说，后端负责 <code>数据编造</code> ,而前端则负责 <code>数据渲染</code> ，前端静态页面调用指定 api 获取到有固定格式的数据，再将数据展示出来，这样呈现给用户的就是一个”动态“的过程，为了加强约束和规范数据交互过程中的统一， 就需要一个 <code>restful</code> 这样的规范来统一风格。</p><h2 id="rest-设计原则" tabindex="-1"><a class="header-anchor" href="#rest-设计原则" aria-hidden="true">#</a> rest 设计原则</h2><ol><li>客户端-服务器：通过将用户 UI 与数据存储分开，我们可以简化服务器组件来提高跨多个平台的用户界面的可移植性并提高可伸缩性。 它可以比表现成前后端分离的思想。</li><li>无状态：从客户端到服务器的每个请求都必须包含理解请求所需的所有信息，并且不能利用服务器上任何存储的上下文。 这表示你应该尽可能的避免使用 session，由客户端自己标识会话状态。（token）</li><li>规范接口：REST 接口约束定义：资源识别; 请求动作; 响应信息; 它表示通过 uri 标出你要操作的 <code>资源</code> ，通过请求动作（http method）标识要执行的操作，通过返回的状态码来表示这次请求的执行结果。</li><li>可缓存： 缓存约束要求将对请求的响应中的数据隐式或显式标记为可缓存或不可缓存。如果响应是可缓存的，则客户端缓存有权重用该响应数据以用于以后的等效请求。 它表示 get 请求响应头中应该表示有是否可缓存的头（Cache-Control)</li></ol><h2 id="协议" tabindex="-1"><a class="header-anchor" href="#协议" aria-hidden="true">#</a> 协议</h2><p>在通信过程中，尽量使用 <code>https</code> 协议</p><h2 id="根路径" tabindex="-1"><a class="header-anchor" href="#根路径" aria-hidden="true">#</a> 根路径</h2><p><code>API</code> 的根入口点应尽可能保持足够简单，这里有两个常见的 <code>URL</code> 根例子：</p><ul><li>api.example.com/*</li><li>example.com/api/*</li></ul><h2 id="版本" tabindex="-1"><a class="header-anchor" href="#版本" aria-hidden="true">#</a> 版本</h2><p>所有的 <code>API</code> 必须保持向后兼容，你 <code>必须</code> 在引入新版本 <code>API</code> 的同时确保旧版本 <code>API</code> 仍然可用。所以 <code>应该</code> 为其提供版本支持。</p><ol><li><p>在 URL 中嵌入版本编号</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>api.example.com/v1/*
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>将版本号放在 <code>HTTP Header</code> 头中, 通过媒体类型来指定版本信息</p></li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Accept: application/vnd.example.com.v1+json
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中 <code>vnd</code> 表示 <code>Standards Tree</code> 标准树类型，有三个不同的树: <code>x</code>，<code>prs</code> 和 <code>vnd</code>。你使用的标准树需要取决于你开发的项目</p><ul><li>未注册的树（<code>x</code>）主要表示本地和私有环境</li><li>私有树（<code>prs</code>）主要表示没有商业发布的项目</li><li>供应商树（<code>vnd</code>）主要表示公开发布的项目</li></ul><p>后面几个参数依次为应用名称（一般为应用域名）、版本号、期望的返回格式。</p><h2 id="端点" tabindex="-1"><a class="header-anchor" href="#端点" aria-hidden="true">#</a> 端点</h2><p>端点就是指向特定资源或资源集合的 <code>URL</code>。在端点的设计中，你 <code>必须</code> 遵守下列约定：</p><ul><li>URL 的命名 <code>必须</code> 全部小写</li><li>URL 中资源（<code>resource</code>）的命名 <code>必须</code> 是名词，并且 <code>必须</code> 是复数形式</li><li><code>必须</code> 优先使用 <code>Restful</code> 类型的 URL</li><li>URL <code>必须</code> 是易读的</li><li>URL <code>一定不可</code> 暴露服务器架构</li></ul><blockquote><p>至于 URL 是否必须使用连字符（<code>-</code>） 或下划线（<code>_</code>），不做硬性规定，但 <code>必须</code> 根据团队情况统一一种风格。</p></blockquote><p>例如：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>https://api.example.com/zoos
https://api.example.com/animals
https://api.example.com/zoos/<span class="token punctuation">{</span>zoo<span class="token punctuation">}</span>/animals
https://api.example.com/animal_types
https://api.example.com/employees
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="http-动词" tabindex="-1"><a class="header-anchor" href="#http-动词" aria-hidden="true">#</a> HTTP 动词</h2><p>对于资源的具体操作类型，由 <code>HTTP</code> 动词表示。常用的 <code>HTTP</code> 动词有下面五个（括号里是对应的 <code>SQL</code> 命令）。</p><ul><li>GET（SELECT）：从服务器取出资源（一项或多项）。</li><li>POST（CREATE）：在服务器新建一个资源。</li><li>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。替换</li><li>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。修改</li><li>DELETE（DELETE）：从服务器删除资源。</li></ul><h2 id="筛选" tabindex="-1"><a class="header-anchor" href="#筛选" aria-hidden="true">#</a> 筛选</h2><blockquote><p>如果记录数量很多，服务器不可能都将它们返回给用户。API <code>应该</code> 提供参数，过滤返回结果。下面是一些常见的参数。</p></blockquote><ul><li>?limit=10：指定返回记录的数量</li><li>?offset=10：指定返回记录的开始位置。</li><li>?page=2&amp;per_page=100：指定第几页，以及每页的记录数。</li><li>?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</li><li>?animal_type_id=1：指定筛选条件</li></ul><h2 id="认证" tabindex="-1"><a class="header-anchor" href="#认证" aria-hidden="true">#</a> 认证</h2><p><code>应该</code> 使用 <code>OAuth2.0</code> 的方式为 API 调用者提供登录认证。<code>必须</code> 先通过登录接口获取 <code>Access Token</code> 后再通过该 <code>token</code> 调用需要身份认证的 <code>API</code>。</p><p>Oauth 的端点设计示列</p><ul><li>RFC 6749 /token</li><li>Twitter /oauth2/token</li><li>Fackbook /oauth/access_token</li><li>Google /o/oauth2/token</li><li>Github /login/oauth/access_token</li><li>Instagram /oauth/authorize</li></ul><p>客户端在获得 <code>access token</code> 的同时 <code>必须</code> 在响应中包含一个名为 <code>expires_in</code> 的数据，它表示当前获得的 <code>token</code> 会在多少 <code>秒</code> 后失效。例如：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;access_token&quot;</span><span class="token operator">:</span> <span class="token string">&quot;token....&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;token_type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Bearer&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;expires_in&quot;</span><span class="token operator">:</span> <span class="token number">3600</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>客户端在请求需要认证的 <code>API</code> 时，<code>必须</code> 在请求头 <code>Authorization</code> 中带上 <code>access_token</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Authorization: Bearer token<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当超过指定的秒数后，<code>access token</code> 就会过期，再次用过期/或无效的 <code>token</code> 访问时，服务端 <code>应该</code> 返回 <code>invalid_token</code> 的错误或 <code>401</code> 错误码。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>HTTP/<span class="token number">1.1</span> <span class="token number">401</span> Unauthorized
Content-Type<span class="token operator">:</span> application/json
Cache-Control<span class="token operator">:</span> no-store
Pragma<span class="token operator">:</span> no-cache

<span class="token punctuation">{</span>
    <span class="token property">&quot;error&quot;</span><span class="token operator">:</span> <span class="token string">&quot;invalid_token&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="响应" tabindex="-1"><a class="header-anchor" href="#响应" aria-hidden="true">#</a> 响应</h2><p>所有的 <code>API</code> 响应，<code>必须</code> 遵守 <code>HTTP</code> 设计规范，<code>必须</code> 选择合适的 <code>HTTP</code> 状态码。<code>一定不可</code> 所有接口都返回状态码为 <code>200</code> 的 <code>HTTP</code> 响应</p><p>下表列举了常见的 <code>HTTP</code> 状态码</p><table><thead><tr><th>状态码</th><th>描述</th></tr></thead><tbody><tr><td>1xx</td><td>代表请求已被接受，需要继续处理</td></tr><tr><td>2xx</td><td>请求已成功，请求所希望的响应头或数据体将随此响应返回</td></tr><tr><td>3xx</td><td>重定向</td></tr><tr><td>4xx</td><td>客户端原因引起的错误</td></tr><tr><td>5xx</td><td>服务端原因引起的错误</td></tr></tbody></table><p>必须强调的是，所有 <code>API</code> <code>一定不可</code> 返回 <code>1xx</code> 类型的状态码。当 <code>API</code> 发生错误时，<code>必须</code> 返回出错时的详细信息。目前常见返回错误信息的方法有两种：</p><p>1、将错误详细放入 <code>HTTP</code> 响应首部；</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>X-MYNAME-ERROR-CODE: <span class="token number">4001</span>
X-MYNAME-ERROR-MESSAGE: Bad authentication token
X-MYNAME-ERROR-INFO: http://docs.example.com/api/v1/authentication
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2、直接放入响应实体中；</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>HTTP/1.1 <span class="token number">401</span> Unauthorized
Server: nginx/1.11.9
Content-Type: application/json
Transfer-Encoding: chunked
Cache-Control: no-cache, private
Date: Sun, <span class="token number">24</span> Jun <span class="token number">2018</span> <span class="token number">10</span>:02:59 GMT
Connection: keep-alive

<span class="token punctuation">{</span><span class="token string">&quot;error_code&quot;</span>:40100,<span class="token string">&quot;message&quot;</span><span class="token builtin class-name">:</span><span class="token string">&quot;Unauthorized&quot;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><code>error_code</code> 对应响应的业务错误码</p></blockquote><p>3、<code>200</code> 状态码是最常见的 <code>HTTP</code> 状态码，在所有 <strong>成功</strong> 的 <code>GET</code> 请求中，<code>必须</code> 返回此状态码。<code>HTTP</code> 响应实体部分 <code>必须</code> 直接就是数据，不要做多余的包装。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token property">&quot;user&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Bob&quot;</span><span class="token punctuation">,</span>
    <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">18</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果有额外媒体信息：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
    <span class="token property">&quot;data&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
            <span class="token property">&quot;id&quot;</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
            <span class="token property">&quot;user&quot;</span><span class="token operator">:</span> <span class="token string">&quot;Bob&quot;</span><span class="token punctuation">,</span>
            <span class="token property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">18</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">&quot;meta&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token property">&quot;pagination&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token property">&quot;total&quot;</span><span class="token operator">:</span> <span class="token number">101</span><span class="token punctuation">,</span>
            <span class="token property">&quot;count&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
            <span class="token property">&quot;per_page&quot;</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
            <span class="token property">&quot;current_page&quot;</span><span class="token operator">:</span> <span class="token number">1</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>http 状态码应当符合当前逻辑，切不可都返回 200</p>`,53),d=[c];function t(i,l){return n(),a("div",null,d)}const r=e(o,[["render",t],["__file","RESTFULAPI.html.vue"]]);export{r as default};
