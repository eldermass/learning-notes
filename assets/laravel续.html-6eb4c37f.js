import{_ as p,Y as o,Z as c,a1 as s,a2 as a,a3 as e,$ as l,a0 as t,E as i}from"./framework-6d304b95.js";const r={},d=t('<h1 id="laravel-再续" tabindex="-1"><a class="header-anchor" href="#laravel-再续" aria-hidden="true">#</a> laravel 再续</h1><h2 id="一、核心构架" tabindex="-1"><a class="header-anchor" href="#一、核心构架" aria-hidden="true">#</a> 一、核心构架</h2><h3 id="_1-服务容器、契约" tabindex="-1"><a class="header-anchor" href="#_1-服务容器、契约" aria-hidden="true">#</a> 1. 服务容器、契约</h3>',3),u={href:"https://laravelacademy.org/post/769.html",target:"_blank",rel:"noopener noreferrer"},k=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// config/app.php文件 providers数组里面定义了许多的服务提供器</span>
<span class="token string single-quoted-string">&#39;providers&#39;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span> <span class="token class-name class-name-fully-qualified static-context">App<span class="token punctuation">\\</span>Providers<span class="token punctuation">\\</span>TestServiceProvider</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token punctuation">]</span>

<span class="token comment">// 服务提供者 (xxProvider文件)，负责注册服务，注册后服务才可依赖注入等</span>
<span class="token comment">// 例如： $this-&gt;app-&gt;bind(接口，闭包或接口的实现)  第二个参数的目的是获取一个实例返回到调用者</span>
<span class="token comment">// 在类型提示的时候，使用服务名便可实现依赖注入（注入服务），接口名就是使用时的服务名</span>
<span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">app</span><span class="token operator">-&gt;</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token class-name static-context">DemoInterface</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name static-context">DemoProvider</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 这里的接口一般就是指的（契约），而DemoProvider，DemoProvider2222就是该契约的实现，受到接口的约束</span>
<span class="token keyword">interface</span> <span class="token class-name-definition class-name">DemoInterface</span>
<span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function-definition function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 通过接口约束，这样能够很轻松的切换驱动服务，而不改动使用时的逻辑代码</span>
<span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">app</span><span class="token operator">-&gt;</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token class-name static-context">DemoInterface</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name static-context">DemoProvider2222</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// 可通过app辅助函数访问，可以依赖注入等</span>
<span class="token function">app</span><span class="token punctuation">(</span><span class="token class-name static-context">IService</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 新加一个服务容器过程</span>
<span class="token comment">// 1. 注册 服务提供者</span>
php artisan make<span class="token punctuation">:</span>Provider ServiceProvider
<span class="token comment">// 2. 把 服务提供者 注册到config/app中</span>
<span class="token comment">// 3. 编写IService服务</span>
<span class="token comment">// 4. 在服务提供者中register里绑定服务，bind， singleton等</span>
<span class="token comment">// $this-&gt;app-&gt;singleton(IService::class, function ($app) { return new IService(&#39;9IIII&#39;); });</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="模型关联" tabindex="-1"><a class="header-anchor" href="#模型关联" aria-hidden="true">#</a> 模型关联</h2>`,3),m={href:"https://learnku.com/docs/laravel/5.8/eloquent-relationships/3932",target:"_blank",rel:"noopener noreferrer"},v=t(`<div class="language-php line-numbers-mode" data-ext="php"><pre class="language-php"><code><span class="token comment">// $with = [] 自动带上关联属性</span>
<span class="token comment">// 一对一 hasOne</span>
<span class="token comment">// params： 关联的表模型， 关联表的key，本表的key</span>
<span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">hasOne</span><span class="token punctuation">(</span><span class="token class-name static-context">UserProfile</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;foreignKey&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;localKey&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">// 一对多 hasMany</span>
<span class="token comment">// params： 关联的表模型， 关联表的key，本表的key</span>
<span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">hasMany</span><span class="token punctuation">(</span><span class="token class-name static-context">Post</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 一对x反查，belongsTo</span>
<span class="token comment">// params：关联的表，本表的key，关联表的key， 对应关联关系方法名</span>
<span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">belongsTo</span><span class="token punctuation">(</span><span class="token class-name static-context">UserProfile</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 多对多， belongsToMany</span>
<span class="token comment">// params：关联表类，中间表名或类，中间表对应本地的key，中间表对应关联的key， 本表的key，关联表的key</span>
<span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">belongsToMany</span><span class="token punctuation">(</span><span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name static-context">Groups</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span>

<span class="token comment">// 远程一对x，通过中间关联模型</span>
<span class="token comment">// params: 关联表， 中间表，中间表对应本地key，关联表key， 本地的key，中间表对关联表的key，</span>
<span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token function">hasManyThrough</span><span class="token punctuation">(</span><span class="token class-name static-context">User</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name static-context">Groups</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="artisan-命令" tabindex="-1"><a class="header-anchor" href="#artisan-命令" aria-hidden="true">#</a> Artisan 命令</h2><p>app/Console/Commands 下 commands 方法引入了两个自定义命令来源，可以加入更多</p><h2 id="广播" tabindex="-1"><a class="header-anchor" href="#广播" aria-hidden="true">#</a> 广播</h2>`,4),h={href:"https://laravelacademy.org/post/8559.html",target:"_blank",rel:"noopener noreferrer"},b=s("br",null,null,-1),g={href:"https://segmentfault.com/a/1190000015772826",target:"_blank",rel:"noopener noreferrer"},f=t(`<h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># ide-helper 修改单个模型帮助</span>
art ide-helper:models <span class="token parameter variable">-W</span> <span class="token parameter variable">-R</span> <span class="token string">&quot;\\App\\Models\\Shop\\CountryTip&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,2);function y(_,x){const n=i("ExternalLinkIcon");return o(),c("div",null,[d,s("p",null,[s("a",u,[a("控制反转（IoC）和依赖注入（DI）"),e(n)])]),l(" [契约解释]](https://learnku.com/articles/17638) "),k,s("p",null,[s("a",m,[a("文档"),e(n)])]),v,s("p",null,[s("a",h,[a("入门教程"),e(n)]),b,s("a",g,[a("经验"),e(n)])]),f])}const I=p(r,[["render",y],["__file","laravel续.html.vue"]]);export{I as default};
