import{_ as a,Y as n,Z as s,a0 as e}from"./framework-6d304b95.js";const t={},p=e(`<h1 id="原码、补码、反码的概念以及位运算" tabindex="-1"><a class="header-anchor" href="#原码、补码、反码的概念以及位运算" aria-hidden="true">#</a> 原码、补码、反码的概念以及位运算</h1><h2 id="_1-原码、补码、反码" tabindex="-1"><a class="header-anchor" href="#_1-原码、补码、反码" aria-hidden="true">#</a> 1 原码、补码、反码</h2><h3 id="_1-1-原码组成" tabindex="-1"><a class="header-anchor" href="#_1-1-原码组成" aria-hidden="true">#</a> 1.1 原码组成</h3><p>机器数是一个数在计算机中的二进制表示形式,机器数是带符号的，在计算机中用一个数的最高位（第一位）存放符号, 正数为 0, 负数为 1。例如 1（带符号即+1）在计算机中的最终表示形式为 0000 0001，依此类推-1 的二进制为 1000 0001。这种表示方式又叫做原码，其中 0 的原码为 0000 0000。 注：为什么 1 是 0000 0001 而不是 0001，在计算机中最小的存储单位是字节，1 个字节占 8 位</p><h3 id="_1-2-反码" tabindex="-1"><a class="header-anchor" href="#_1-2-反码" aria-hidden="true">#</a> 1.2 反码</h3><p>如果是正数，反码和原码是一样的，也就是 1 的原码是 0000 0001，它的反码也是 0000 0001.</p><p>如果是负数，反码就是在原码的基础上保持符号位不变，其它依次取反，因为-1 的原码是 1000 0001，所以它的反码是 1111 1110</p><h3 id="_1-3-补码" tabindex="-1"><a class="header-anchor" href="#_1-3-补码" aria-hidden="true">#</a> 1.3 补码</h3><p>如果是正数，补码和原码是一样的，也就是 1 的原码是 0000 0001，它的补码也是 0000 0001.</p><p>如果是负数，补码就是在反码的基础上加 1，因为-1 的原码是 1000 0001，它的反码是 1111 1110，所示它的补码是 1111 1111。</p><h3 id="_1-4-总结" tabindex="-1"><a class="header-anchor" href="#_1-4-总结" aria-hidden="true">#</a> 1.4 总结</h3><p>正数的原码、反码、补码都是一样的。</p><p>0 的原码、反码、补码都是 0000 0000。</p><p>负数的反码符号位表示符号的值不变，其它取反，补码在反码基础上加 1。 注：计算机中的运算都是以补码的形式参与运算的！！！！！</p><h2 id="_2-位运算" tabindex="-1"><a class="header-anchor" href="#_2-位运算" aria-hidden="true">#</a> 2 位运算</h2><p>计算机中的运算都是以补码的形式参与运算的！</p><h3 id="_2-1-按位与" tabindex="-1"><a class="header-anchor" href="#_2-1-按位与" aria-hidden="true">#</a> 2.1 按位与&amp;</h3><p>按位与运算规则是：相同位都为 1，则为 1，否则为 0。 举个例子：</p><p>例 1：计算 1&amp;3 的值是多少？ 1 的原码是 0000 0001，补码为 0000 0001 3 的原码是 0000 0011，补码为 0000 0011 通过上面的规则只有最后一位都是 1（补码参与运算，后同），所以最后的结果是 0000 0001，原码也是 0000 0001，也就是 1，即 1&amp;3=1。 我们通过代码展示：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    a<span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span>
    <span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>程序最终输出结果是 1。</p><p>例 2：计算-1&amp;3 的值是多少？ -1 原码是 1000 0001，反码是 1111 1110，补码是 1111 1111。3 的原码、反码、补码都是 0000 0011。由于最后两个都是 1，所以结果是 0000 0011，原码也是 0000 0011，即为 3。</p><h3 id="_2-2-按位或" tabindex="-1"><a class="header-anchor" href="#_2-2-按位或" aria-hidden="true">#</a> 2.2 按位或|</h3><p>按位或的运算规则是：只要有一个为 1，则为 1，否则为 0。 举例： 例 1：1|3 结果是多少？ 1 的补码是 0000 0001，3 的补码是 0000 0011，所示结果为 0000 0011，原码为 0000 0011，即为 3。 代码：</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
a<span class="token punctuation">,</span> b <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span>
<span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">|</span> b<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例 2：-1|3 的结果是多少？ -1 的补码是：1111 1111，3 的补码是 0000 0011，所以结果是为 1111 1111，原码为 1000 0001，即为-1。</p><h3 id="_2-3-按位异或" tabindex="-1"><a class="header-anchor" href="#_2-3-按位异或" aria-hidden="true">#</a> 2.3 按位异或^</h3><p>按位异或的规则是：相同位相同则为 0，不同则为 1. 举例： 例 1：1^3 是多少？ 1 的补码是 0000 0001，3 的补码是 0000 0011，结果是 0000 0010，对应的原码是 0000 0010，即为 2。 例 2：-1^3 的结果是多少？ -1 的补码是：1111 1111，3 的补码是 0000 0011，所以结果是为 1111 1100，原码为 1000 0100，即为-4。</p><h3 id="_2-4-右移运算" tabindex="-1"><a class="header-anchor" href="#_2-4-右移运算" aria-hidden="true">#</a> 2.4 右移运算&gt;&gt;</h3><p>右移运算的规则是：低位（0）补齐，用符号位补移出的高位（1）。 举例： 例 1：1&gt;&gt;5 是多少？ 1 的补码是 0000 0001，右移 5 后为，0000 0000，符号位是 0，补最后一个 1，结果还是 0000 0000，即 0。 例 2：3&gt;&gt;1 是多少？ 3 的补码是 0000 0011，右移 1 后为，0000 0001，符号位是 0，补倒数第二个 1，结果是 0000 0001，即 1。</p><h3 id="_2-5-左移运算" tabindex="-1"><a class="header-anchor" href="#_2-5-左移运算" aria-hidden="true">#</a> 2.5 左移运算&lt;&lt;</h3><p>左移运算的规则是：符号位不变 举例： 例 1：-1&lt;&lt;5 是多少？ -1 的补码是 1111 1111，左移 5 是 1110 0000，补码是 1101 1111 原码是 1010 0000，即-32。 例 2：3&lt;&lt;1 是多少？ 3 的补码是 0000 0011，左移 1 后为是 0000 0110，原码是 0000 0110，即 6。 例 3：3&lt;&lt;6 是多少？ 3 的补码是 0000 0011，左移 1 后为是 0000 1100 0000，原码是 0000 1100 0000，即 192。</p>`,32),i=[p];function c(r,d){return n(),s("div",null,i)}const l=a(t,[["render",c],["__file","位运算.html.vue"]]);export{l as default};
