# 格式的版本
version: "3"

services:
  # 服务名
  service_nginx:
    # 生成的容器名
    container_name: nginx
    # 重启策略，默认no， always表示报错总会重启
    restart: always
    # 指定使用镜像，如果你还指定了build，它将使用指定的build选项构建它，并使用image指定的名字和标记对其进行标记。
    image: nginx:stable
    # 从Dockerfile 构建镜像，参数可以在Dockerfile中通过$buildno访问
    build: 
      context: ./dir
      dockerfile: Dockerfile
      args:
          buildno: 1
    # 映射网路 （HOST:CONTAINER）
    ports:
      - "80:80"
      - "127.0.0.1:8080:8080"
      - "127.0.0.1:3000-3010:3000-3010"
    # 卷挂载路径设置，win下 e盘对应 /e/, HOST:CONTAINER:ro，最后一个参数 ro：只读， rw：读写
    volumes:
      - /e/test/docker:/etc/nginx/conf.d
    # 链接到指定服务名称和链接别名  SERVICE：ALIAS
    # /etc/hosts 通过 服务名或别名 能访问到node服务暴露的网络
    links:
      - node:node
    # 链接到非docker-compose管理的容器
    external_links:
      - mysql
      - redis_1:redis
    # 覆盖容器启动后默认执行的命令
    command: sh -c 'ping www.baidu.com'
    # 环境变量
    environment:
      - SECRET=development
    # 读取env文件作为环境变量
    env_file:
      - ./web.env
    # 暴露端口，但不映射到宿主机，只被连接的服务访问。
    expose:
      - "80"
      - "443"
    # 共享容器与主机之间的PID地址空间，容器将能够访问和操作主机的命名空间中的其他容器
    pid: "host"
    # dns也可以是一个值
    dns:
      - 8.8.8.8
      - 9.9.9.9
    networks:
      lnmp-network:
        aliases:
          - service_nginx
    # 是否拥有root权限
    privileged: true
    # 本服务依赖的服务，顺序在其后启动
    depends_on:
      - node
    ulimits:
      nproc: 65535
      nofile:
        soft: 20000
        hard: 40000
  node:
    container_name: node
    build: .
    expose:
      - "3000"
    ports:
      - "3000:3000"
    command: npm start
    networks:
      lnmp-network:
        aliases:
          - node
    privileged: true
    ulimits:
      nproc: 65535
      nofile:
        soft: 20000
        hard: 40000
networks:
  lnmp-network:
